Here is the code for insertion of the nodes in AVL tree(modified form of BST)
#include<stdio.h>
#include<stdlib.h>
struct node{
  int data;
  struct node* lchild;
  struct node* rchild;
  int height;
};
struct node* leftrotation(struct node* root);
struct node* rightrotation(struct node* root);
int balance(struct node* N);
int max(int a,int b);
struct node* new_node(int key);
struct node* insert(struct node* root,int key);
int height(struct node* N);
struct node* preorder(struct node* N);
int main()
{
  struct node* root=NULL;
  root=insert(root,20);
  root=insert(root,10);
  root=insert(root,15);
  root=insert(root,-10);
  root=insert(root,-5);
  printf("\nPreorder transversal is:\n");
  preorder(root);
  return 0;
}
struct node* preorder(struct node* N)
{
  if(N==NULL)
  {
    return 0;
  }
  else
  {
    printf("%d",N->data);
    preorder(N->lchild);
    preorder(N->rchild);
  }
}
struct node* new_node(int key)
{
  struct node* temp;
  temp->data=key;
  temp->lchild=NULL;
  temp->rchild=NULL;
  temp->height=1;
  return temp;
}
struct node* insert(struct node* root,int key)
{
  if(root==NULL)
  {
    return new_node(key);
  }
  if(key<root->data)
  {
    root->lchild=insert(root->lchild,key);
  }
  if(key>root->data)
  {
    root->rchild=insert(root->rchild,key);
  }
  else
  {
    return root;
  }
  root->height=1+max(height(root->lchild),height(root->rchild));
  int getb=balance(root);
  if(getb>1)
  {
    if(height(root->lchild)>height(root->rchild))
    {
      return rightrotation(root);
    }
    else
    {
      root->lchild=rightrotation(root->lchild);
      return rightrotation(root);
    }
  }
  if(getb<-1)
  {
    if(height(root->lchild)<height(root->rchild))
    {
      return leftrotation(root);
    }
    else
    {
      root->rchild=leftrotation(root->rchild);
      return leftrotation(root);
    }
  }
  return root;
}
struct node* leftrotation(struct node* root)
{
  struct node* new_node;
  new_node=root->rchild;
  root->rchild=new_node->lchild;
  new_node->lchild=root;
  root->height=max(height(root->lchild),height(root->rchild));
  new_node->height=max(height(new_node->lchild),height(new_node->rchild));
  return new_node;
}
struct node* rightrotation(struct node* root)
{
  struct node* new_node;
  new_node=root->lchild;
  root->lchild=new_node->rchild;
  new_node->rchild=root;
  root->height=max(height(root->lchild),height(root->rchild));
  new_node->height=max(height(new_node->lchild),height(new_node->rchild));
  return new_node;
}
int balance(struct node* N)
{
  return ((N->lchild->height)-(N->rchild->height));
}
int max(int a,int b)
{
  return (a>=b?a:b);
}
int height(struct node* N)
{
  if(N==0)
  {
    return 0;
  }
  return N->height;
}
